digraph clustercart {
	graph [label=cart]
	1 [label="from online_shopping_cart.product.product import Product
\"\"\"
    ShoppingCart class to represent the user's shopping cart
    \"\"\"
def __init__(self) ->None:...
def __get_product_by_name(self, product_search: Product) ->[Product]:...
def add_item(self, product) ->None:...
def remove_item(self, product: Product) ->None:...
def retrieve_items(self) ->list[Product]:...
def clear_items(self) ->None:...
def is_empty(self) ->bool:...
def get_total_price(self) ->float:...
"]
	subgraph cluster__init__ {
		graph [label=__init__]
		3 [label="self.items: list[Product] = list()
"]
		"3_calls" [label=list shape=box]
		3 -> "3_calls" [label=calls style=dashed]
	}
	subgraph cluster__get_product_by_name {
		graph [label=__get_product_by_name]
		6 [label="return [product_i for product_i in self.items if product_i.name ==
    product_search.name]
"]
	}
	subgraph clusteradd_item {
		graph [label=add_item]
		10 [label="\"\"\"
        Add a product to the cart if not already there, otherwise increment the number of units
        \"\"\"
product_in_items: [Product] = self.__get_product_by_name(product)
if not product_in_items:
"]
		"10_calls" [label="self.__get_product_by_name" shape=box]
		10 -> "10_calls" [label=calls style=dashed]
		11 [label="self.items.append(product)
"]
		"11_calls" [label="self.items.append" shape=box]
		11 -> "11_calls" [label=calls style=dashed]
		10 -> 11 [label="not product_in_items"]
		13 [label="product_in_items[0].units += 1
"]
		10 -> 13 [label="(not not product_in_items)"]
	}
	subgraph clusterremove_item {
		graph [label=remove_item]
		16 [label="\"\"\"
        Remove a product from the cart
        \"\"\"
product_in_items: [Product] = self.__get_product_by_name(product)
product_in_items[0].units -= 1
if product_in_items[0].units == 0:
"]
		"16_calls" [label="self.__get_product_by_name" shape=box]
		16 -> "16_calls" [label=calls style=dashed]
		17 [label="self.items.remove(product)
"]
		"17_calls" [label="self.items.remove" shape=box]
		17 -> "17_calls" [label=calls style=dashed]
		16 -> 17 [label="product_in_items[0].units == 0"]
	}
	subgraph clusterretrieve_items {
		graph [label=retrieve_items]
		21 [label="\"\"\"
        Retrieve the items in the cart
        \"\"\"
return self.items
"]
	}
	subgraph clusterclear_items {
		graph [label=clear_items]
		25 [label="\"\"\"
        Clear all items from the cart
        \"\"\"
self.items = list()
"]
		"25_calls" [label=list shape=box]
		25 -> "25_calls" [label=calls style=dashed]
	}
	subgraph clusteris_empty {
		graph [label=is_empty]
		28 [label="\"\"\"
        Checks if the cart is empty
        \"\"\"
return self.items == []
"]
	}
	subgraph clusterget_total_price {
		graph [label=get_total_price]
		32 [label="\"\"\"
        Calculate the total price of items in the cart
        \"\"\"
return sum(item.price * item.units for item in self.items)
"]
	}
}
